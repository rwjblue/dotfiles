#!/usr/bin/env zsh

set -e # fail if anything exits non-zero

if [ -f /etc/rdev.conf ]; then
  FORCE="true"
fi

log_file="$HOME/dotfiles_install_log.txt"

log() {
  local message="$1"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "$timestamp - $message" | tee -a "$log_file"
}

log_error() {
  local message="$1"
  local exit_code="$2"
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "$timestamp - ERROR: $message (Exit code: $exit_code)" | tee -a "$log_file"
}

run_command() {
  local command="$1"
  log "Running command: $command"
  {
    eval "$command" 2>&1 | tee >(tee -a "$log_file") | tail -n +1
  } || {
    local exit_code=$?
    log_error "Command failed: $command" "$exit_code"
    exit $exit_code
  }
}

DOTFILES=$(dirname ${(%):-%x})

abspath() {
  # generate absolute path from relative path
  # $1     : relative filename
  # return : absolute path
  if [ -d "$1" ]; then
    # dir
    (cd "$1"; pwd)
  elif [ -f "$1" ]; then
    # file
    if [[ $1 = /* ]]; then
      echo "$1"
    elif [[ $1 == */* ]]; then
      echo "$(cd "${1%/*}"; pwd)/${1##*/}"
    else
      echo "$(pwd)/$1"
    fi
  fi
}

link-dotfile() {
  local SOURCE=$1
  local TARGET=$2

  local ABSOLUTE_SOURCE=$(abspath $DOTFILES/$SOURCE)

  if [ "$FORCE" = "true" ]; then
    rm -rf $TARGET
  fi

  if [ -e $TARGET ]; then
    if [ -L $TARGET ]; then
      current=$(readlink $TARGET)
      if [ $current != $ABSOLUTE_SOURCE ]; then
        log "$TARGET already exists and is symlinked to $current"
      fi
    else
      log "$TARGET already exists"
    fi
  else
    log "creating link for $TARGET"
    mkdir -p "$(dirname $TARGET)"
    ln -s $ABSOLUTE_SOURCE "$TARGET"
  fi
}

copy-dotfile() {
  local SOURCE=$1
  local TARGET=$2

  local ABSOLUTE_SOURCE=$(abspath $DOTFILES/$SOURCE)

  if [ "$FORCE_LOCAL" = "true" ]; then
    rm -rf $TARGET
  fi

  if [ -e $TARGET ]; then
    log "$TARGET already exists";
  else
    log "creating $TARGET"
    mkdir -p $(dirname $TARGET)
    cp $ABSOLUTE_SOURCE $TARGET
  fi
}

link-dotfile "starship/starship.toml" "$HOME/.config/starship.toml"

mkdir -p ~/bin

link-dotfile "bash/bashrc" "$HOME/.bashrc"

link-dotfile "zsh" "$HOME/.zsh"
link-dotfile "zsh/zshenv" "$HOME/.zshenv"
link-dotfile "zsh/zprofile" "$HOME/.zprofile"
link-dotfile "zsh/zshrc" "$HOME/.zshrc"
copy-dotfile "zsh/zshrc.local" "$HOME/.zshrc.local"
link-dotfile "zsh/sheldon" "$HOME/.config/sheldon"
link-dotfile "atuin" "$HOME/.config/atuin"

link-dotfile "git/gitconfig" "$HOME/.gitconfig"
link-dotfile "git/gitignore_global" "$HOME/.gitignore_global"
copy-dotfile "git/gitconfig.local" "$HOME/.gitconfig.local"

link-dotfile "tmux/tmux.conf" "$HOME/.tmux.conf"
copy-dotfile "tmux/tmux.local.conf" "$HOME/.tmux.local.conf"

link-dotfile "cargo/config.toml" "$HOME/.cargo/config.toml"

if [[ "$OSTYPE" == darwin* ]]; then
  link-dotfile "vscode/settings.json" "$HOME/Library/Application Support/Code/User/settings.json"
  link-dotfile "vscode/keybindings.json" "$HOME/Library/Application Support/Code/User/keybindings.json"
  link-dotfile "vscode/snippets" "$HOME/Library/Application Support/Code/User/snippets"
  link-dotfile "tealdeer/config.toml" "$HOME/Library/Application Support/tealdeer/config.toml"
fi

if [ ! -d ~/.ssh ]; then
  log "Creating .ssh dir"
  mkdir $HOME/.ssh
fi
link-dotfile "ssh/rc" "$HOME/.ssh/rc"

if [[ ! -x "$(command -v volta)" ]]; then
  log "installing volta"
  curl https://get.volta.sh | bash

  log "installing current node & yarn"
  $HOME/.volta/volta install node
  $HOME/.volta/volta install yarn
fi

if [[ "$OSTYPE" == darwin* ]]; then
  if ! command -v brew >/dev/null; then
    log "Installing Homebrew ..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  brew install fzf tmux rbenv starship zoxide gh ripgrep nvim tealdeer eza sheldon git git-delta gnu-sed bat atuin
else
  if [ -f /etc/rdev.conf ]; then
    log "Running rdev specific setup"
    run_command "sudo yum install -y gcc make openssl-devel curl-devel expat-devel gettext-devel"
  fi

  if ! which sheldon > /dev/null 2>&1; then
    log "Installing sheldon"
    run_command "curl --proto '=https' -fLsS https://rossmacarthur.github.io/install/crate.sh | bash -s -- --repo rossmacarthur/sheldon --to ~/.local/bin"
    export PATH="$HOME/.local/bin:$PATH"
  fi

  if ! which starship > /dev/null 2>&1; then
    log "Installing starship"
    run_command "curl -sS https://starship.rs/install.sh | sh -s -- --force"
  fi

  if ! which zoxide > /dev/null 2>&1; then
    log "Installing zoxide"
    run_command "curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh"
  fi

  if ! which eza > /dev/null 2>&1; then
    log "Installing eza"
    run_command "wget -c https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-gnu.tar.gz -O - | tar xz"
    run_command "sudo chmod +x eza"
    run_command "sudo chown root:root eza"
    run_command "sudo mv eza /usr/local/bin/eza"
  fi

  if ! which bat > /dev/null 2>&1; then
    log "Installing bat"
    run_command "cargo install --locked bat"
  fi

  if ! which delta > /dev/null 2>&1; then
    log "Installing delta"
    run_command "cargo install --locked git-delta"
  fi

  if [[ ! -d $HOME/.fzf ]]; then
    log "Installing fzf"
    run_command "git clone https://github.com/junegunn/fzf.git $HOME/.fzf"
    run_command "$HOME/.fzf/install --bin"
  fi
fi

# now setup the shell
sheldon lock
