# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

vars:
  DOTFILES_DIR:
    sh: pwd
  # Get FORCE from environment or default to false
  FORCE:
    sh: if [ "${FORCE:-false}" = "true" ] || [ -f /etc/rdev.conf ]; then echo "true"; else echo "false"; fi

includes:
  nvim:
    taskfile: ./nvim.yml

tasks:
  link_dotfile:
    internal: true
    vars:
      SRC: "{{.SRC}}"
      DEST: "{{.DEST}}"
      FORCE: '{{.FORCE | default .FORCE | default "false"}}'
    cmds:
      - |
        SRC_PATH="{{.DOTFILES_DIR}}/{{.SRC}}"
        DEST_PATH="{{.DEST}}"

        # Create parent directory if it doesn't exist
        mkdir -p "$(dirname "$DEST_PATH")"

        # If FORCE is true, remove the target
        if [ "{{.FORCE}}" = "true" ]; then
          rm -rf "$DEST_PATH"
        fi

        # Check if target already exists
        if [ -e "$DEST_PATH" ]; then
          if [ -L "$DEST_PATH" ]; then
            current=$(readlink "$DEST_PATH")
            if [ "$current" != "$SRC_PATH" ]; then
              echo "$DEST_PATH already exists and is symlinked to $current"
            fi
          else
            echo "$DEST_PATH already exists"
          fi
        else
          echo "creating link for $DEST_PATH"
          ln -s "$SRC_PATH" "$DEST_PATH"
        fi

  copy_dotfile:
    internal: true
    vars:
      SRC: "{{.SRC}}"
      DEST: "{{.DEST}}"
      FORCE: '{{.FORCE | default .FORCE | default "false"}}'
    cmds:
      - |
        SRC_PATH="{{.DOTFILES_DIR}}/{{.SRC}}"
        DEST_PATH="{{.DEST}}"

        # Create parent directory if it doesn't exist
        mkdir -p "$(dirname "$DEST_PATH")"

        # If FORCE is true, remove the target
        if [ "{{.FORCE}}" = "true" ]; then
          rm -rf "$DEST_PATH"
        fi

        # Check if target already exists
        if [ -e "$DEST_PATH" ]; then
          echo "$DEST_PATH already exists"
        else
          echo "creating $DEST_PATH"
          cp "$SRC_PATH" "$DEST_PATH"
        fi

  install:
    desc: Install dotfiles
    summary: |
      Install dotfiles

      This task will install and configure all dotfiles.
    cmds:
      - task: install:requirements
      - task: build:binutils
      - task: setup:config
      - task: nvim:restore
      - task: print:done

  sync:
    desc: Synchronize dotfiles
    summary: |
      Synchronize dotfiles

      Use this task to update your dotfiles configuration.
    cmds:
      - task: setup:config
      - task: print:done

  setup:config:
    desc: Setup configuration files
    internal: true
    cmds:
      - task: utils:ensure_dirs
      - task: utils:link_dotfiles
      - task: utils:copy_dotfiles

  utils:ensure_dirs:
    internal: true
    cmds:
      - mkdir -p ~/bin
      - mkdir -p ~/.ssh
      - mkdir -p ~/.cargo

  utils:link_dotfiles:
    internal: true
    deps:
      - task: utils:link_macos_dotfiles
      - task: utils:link_linux_dotfiles

    vars:
      DOTFILES:
        - "packages/nvim|$HOME/.config/nvim"
        - "packages/starship/starship.toml|$HOME/.config/starship.toml"
        - "packages/shells/dist/bash/bashrc|$HOME/.bashrc"
        - "packages/shells/dist/zsh/|$HOME/.zsh"
        - "packages/shells/dist/fish/|$HOME/.config/fish"
        - "packages/shells/dist/zsh/zshenv|$HOME/.zshenv"
        - "packages/shells/dist/zsh/zprofile|$HOME/.zprofile"
        - "packages/shells/dist/zsh/zshrc|$HOME/.zshrc"
        - "packages/atuin|$HOME/.config/atuin"
        - "packages/git/gitconfig|$HOME/.gitconfig"
        - "packages/git/gitignore_global|$HOME/.gitignore_global"
        - "packages/gh/config.yml|$HOME/.config/gh/config.yml"
        - "packages/tmux/tmux.conf|$HOME/.tmux.conf"
        - "packages/cargo/config.toml|$HOME/.cargo/config.toml"
        - "packages/binutils/config/|$HOME/.config/binutils"
        - "packages/wezterm/|$HOME/.config/wezterm"
        - "packages/ghostty/|$HOME/.config/ghostty"
        - "packages/ssh/rc|$HOME/.ssh/rc"

    cmds:
      - for:
          var: DOTFILES
          as: DOTFILE
        task: link_dotfile
        vars:
          SRC: '{{splitList "|" .DOTFILE | first}}'
          DEST: '{{splitList "|" .DOTFILE | last}}'

  utils:link_macos_dotfiles:
    internal: true
    platforms: [darwin]
    vars:
      MACOS_DOTFILES:
        - "packages/vscode/settings.json|$HOME/Library/Application Support/Code/User/settings.json"
        - "packages/vscode/keybindings.json|$HOME/Library/Application Support/Code/User/keybindings.json"
        - "packages/vscode/snippets|$HOME/Library/Application Support/Code/User/snippets"
        - "packages/tealdeer/config.toml|$HOME/Library/Application Support/tealdeer/config.toml"
        - "packages/jj/|$HOME/Library/Application Support/jj"
    cmds:
      - for:
          var: MACOS_DOTFILES
          as: DOTFILE
        task: link_dotfile
        vars:
          SRC: '{{splitList "|" .DOTFILE | first}}'
          DEST: '{{splitList "|" .DOTFILE | last}}'
          FORCE: "{{.FORCE}}"

  utils:link_linux_dotfiles:
    internal: true
    platforms: [linux]
    vars:
      LINUX_DOTFILES:
        - "packages/jj/|$HOME/.config/jj"
    cmds:
      - for:
          var: LINUX_DOTFILES
          as: DOTFILE
        task: link_dotfile
        vars:
          SRC: '{{splitList "|" .DOTFILE | first}}'
          DEST: '{{splitList "|" .DOTFILE | last}}'
          FORCE: "{{.FORCE}}"

  utils:copy_dotfiles:
    internal: true
    vars:
      FORCE_LOCAL: "false"
      COPY_DOTFILES:
        - "packages/shells/dist/zsh/zshrc.local|$HOME/.zshrc.local"
        - "packages/git/gitconfig.local|$HOME/.gitconfig.local"
        - "packages/tmux/tmux.local.conf|$HOME/.tmux.local.conf"
    cmds:
      - for:
          var: COPY_DOTFILES
          as: DOTFILE
        task: copy_dotfile
        vars:
          SRC: '{{splitList "|" .DOTFILE | first}}'
          DEST: '{{splitList "|" .DOTFILE | last}}'
          FORCE: "{{.FORCE_LOCAL}}"

  install:requirements:
    desc: Install required tools and dependencies
    internal: true
    cmds:
      - task: install:volta
      - task: install:rust
      - task: install:cargo_tools
      - task: install:platform_tools

  install:volta:
    internal: true
    status:
      - which volta
    cmds:
      - echo "Installing volta"
      - curl https://get.volta.sh | bash
      - $HOME/.volta/volta install node
      - $HOME/.volta/volta install yarn

  install:rust:
    internal: true
    status:
      - which rustup
    cmds:
      - echo "Installing rustup"
      - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - source $HOME/.cargo/env
      - rustup self update
      - rustup update stable

  install:cargo_tools:
    internal: true
    deps: [install:cargo_binstall]
    cmds:
      - for: [cargo-nextest, cargo-insta]
        task: install:cargo_tool
        vars: { TOOL: "{{.ITEM}}" }

  install:cargo_tool:
    internal: true
    vars:
      TOOL: "{{.TOOL}}"
    status:
      - which {{.TOOL}}
    cmds:
      - echo "Installing {{.TOOL}}"
      - cargo binstall --locked --no-confirm {{.TOOL}}

  install:cargo_binstall:
    internal: true
    status:
      - which cargo-binstall
    cmds:
      - echo "Installing cargo-binstall"
      - curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

  install:platform_tools:
    internal: true
    cmds:
      - task: install:macos_tools
      - task: install:linux_tools

  install:macos_tools:
    internal: true
    platforms: [darwin]
    cmds:
      - task: install:homebrew
      - brew install fzf tmux rbenv starship zoxide gh ripgrep nvim tealdeer eza git git-delta gnu-sed bat atuin sd jj fish ast-grep zig go
      - brew install --cask wezterm ghostty

  install:homebrew:
    internal: true
    status:
      - which brew
    cmds:
      - echo "Installing Homebrew"
      - /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

  install:linux_tools:
    internal: true
    platforms: [linux]
    cmds:
      - task: install:rdev_specific
      - task: install:linux_starship
      - task: install:linux_binstall_tools
      - task: install:linux_fzf

  install:rdev_specific:
    status:
      - test -f /etc/rdev.conf
    internal: true
    cmds:
      - "{{.DOTFILES_DIR}}/utils/handle-older-git.zsh"
      - "{{.DOTFILES_DIR}}/utils/setup-rdev-nvim.zsh"

  install:linux_starship:
    internal: true
    status:
      - which starship
    cmds:
      - echo "Installing starship"
      - curl -sS https://starship.rs/install.sh | sh -s -- --force

  install:linux_zoxide:
    internal: true
    status:
      - which zoxide
    cmds:
      - echo "Installing zoxide"
      - curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh

  install:linux_binstall_tools:
    internal: true
    cmds:
      - for: [eza, bat, git-delta, sd]
        task: install:linux_binstall_tool
        vars: { TOOL: "{{.ITEM}}" }

  install:linux_binstall_tool:
    internal: true
    vars:
      TOOL: "{{.TOOL}}"
      BINARY: '{{if eq .TOOL "git-delta"}}delta{{else}}{{.TOOL}}{{end}}'
    status:
      - which {{.BINARY}}
    cmds:
      - echo "Installing {{.TOOL}}"
      - cargo binstall --locked --no-confirm {{.TOOL}}

  install:linux_fzf:
    internal: true
    dir: $HOME
    status:
      - test -d $HOME/.fzf
    cmds:
      - echo "Installing fzf"
      - git clone https://github.com/junegunn/fzf.git $HOME/.fzf
      - $HOME/.fzf/install --bin

  build:binutils:
    desc: Build binutils
    internal: true
    cmds:
      - "{{.DOTFILES_DIR}}/utils/build-binutils.zsh"
      - echo "Cache shell setup"
      - "$HOME/src/malleatus/shared_binutils/target/debug/cache-shell-startup"

  print:done:
    desc: Prints done with a cool font and some nice gradients (animated)
    internal: true
    cmd: echo DONE | figlet | lolcrab -a --speed 1 --duration 1 --gradient warm
    silent: true
