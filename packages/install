#!/usr/bin/env zsh

set -e # fail if anything exits non-zero

if [ -f /etc/rdev.conf ]; then
  FORCE="true"
fi

DOTFILES=$(dirname "$(realpath "$0")")

abspath() {
  # generate absolute path from relative path
  # $1     : relative filename
  # return : absolute path
  if [ -d "$1" ]; then
    # dir
    (cd "$1"; pwd)
  elif [ -f "$1" ]; then
    # file
    if [[ $1 = /* ]]; then
      echo "$1"
    elif [[ $1 == */* ]]; then
      echo "$(cd "${1%/*}"; pwd)/${1##*/}"
    else
      echo "$(pwd)/$1"
    fi
  fi
}

link-dotfile() {
  local SOURCE=$1
  local TARGET=$2

  local ABSOLUTE_SOURCE=$(abspath $DOTFILES/$SOURCE)

  if [ "$FORCE" = "true" ]; then
    rm -rf $TARGET
  fi

  if [ -e $TARGET ]; then
    if [ -L $TARGET ]; then
      current=$(readlink $TARGET)
      if [ $current != $ABSOLUTE_SOURCE ]; then
        echo "$TARGET already exists and is symlinked to $current"
      fi
    else
      echo "$TARGET already exists"
    fi
  else
    echo "creating link for $TARGET"
    mkdir -p "$(dirname $TARGET)"
    ln -s $ABSOLUTE_SOURCE "$TARGET"
  fi
}

copy-dotfile() {
  local SOURCE=$1
  local TARGET=$2

  local ABSOLUTE_SOURCE=$(abspath $DOTFILES/$SOURCE)

  if [ "$FORCE_LOCAL" = "true" ]; then
    rm -rf $TARGET
  fi

  if [ -e $TARGET ]; then
    echo "$TARGET already exists";
  else
    echo "creating $TARGET"
    mkdir -p $(dirname $TARGET)
    cp $ABSOLUTE_SOURCE $TARGET
  fi
}

link-dotfile "starship/starship.toml" "$HOME/.config/starship.toml"

mkdir -p ~/bin

link-dotfile "bash/bashrc" "$HOME/.bashrc"

link-dotfile "zsh" "$HOME/.zsh"
link-dotfile "zsh/zshenv" "$HOME/.zshenv"
link-dotfile "zsh/zprofile" "$HOME/.zprofile"
link-dotfile "zsh/zshrc" "$HOME/.zshrc"
copy-dotfile "zsh/zshrc.local" "$HOME/.zshrc.local"
link-dotfile "zsh/sheldon" "$HOME/.config/sheldon"
link-dotfile "atuin" "$HOME/.config/atuin"

link-dotfile "git/gitconfig" "$HOME/.gitconfig"
link-dotfile "git/gitignore_global" "$HOME/.gitignore_global"
copy-dotfile "git/gitconfig.local" "$HOME/.gitconfig.local"

link-dotfile "tmux/tmux.conf" "$HOME/.tmux.conf"
copy-dotfile "tmux/tmux.local.conf" "$HOME/.tmux.local.conf"

link-dotfile "cargo/config.toml" "$HOME/.cargo/config.toml"

if [[ "$OSTYPE" == darwin* ]]; then
  link-dotfile "vscode/settings.json" "$HOME/Library/Application Support/Code/User/settings.json"
  link-dotfile "vscode/keybindings.json" "$HOME/Library/Application Support/Code/User/keybindings.json"
  link-dotfile "vscode/snippets" "$HOME/Library/Application Support/Code/User/snippets"
  link-dotfile "tealdeer/config.toml" "$HOME/Library/Application Support/tealdeer/config.toml"
fi

if [ ! -d ~/.ssh ]; then
  echo "Creating .ssh dir"
  mkdir $HOME/.ssh
fi
link-dotfile "ssh/rc" "$HOME/.ssh/rc"

if [[ ! -x "$(command -v volta)" ]]; then
  echo "installing volta"
  curl https://get.volta.sh | bash

  echo "installing current node & yarn"
  $HOME/.volta/volta install node
  $HOME/.volta/volta install yarn
fi

if [[ "$OSTYPE" == darwin* ]]; then
  if ! command -v brew >/dev/null; then
    echo "Installing Homebrew ..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  brew install fzf tmux rbenv starship zoxide gh ripgrep nvim tealdeer eza sheldon git git-delta gnu-sed bat atuin
else
  # we are within an rdev if this file exists
  if [ -f /etc/rdev.conf ]; then
    # put any rdev specific setup here
    "$DOTFILES/utils/handle-older-git.zsh"
    "$DOTFILES/utils/setup-rdev-nvim.zsh"
  fi

  if ! which rustup > /dev/null 2>&1; then
    echo "Installing rustup"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  fi

  rustup self update
  rustup update stable

  if ! which cargo-binstall > /dev/null 2>&1; then
    echo "Installing cargo-binstall"
    curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
  fi

  if ! which sheldon > /dev/null 2>&1; then
    echo "Installing sheldon"
    curl --proto '=https' -fLsS https://rossmacarthur.github.io/install/crate.sh \
      | bash -s -- --repo rossmacarthur/sheldon --to ~/.local/bin

    export PATH="$HOME/.local/bin:$PATH"
  fi

  if ! which starship > /dev/null 2>&1; then
    echo "Installing starship"
    curl -sS https://starship.rs/install.sh | sh -s -- --force
  fi


  if ! which zoxide > /dev/null 2>&1; then
    echo "Installing zoxide"
    curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
  fi

  if ! which eza > /dev/null 2>&1; then
    echo "Installing eza"
    cargo binstall --locked --no-confirm eza
  fi

  if ! which bat > /dev/null 2>&1; then
    echo "Installing bat"
    cargo binstall --locked --no-confirm bat
  fi

  if ! which delta > /dev/null 2>&1; then
    echo "Installing delta"
    cargo binstall --locked --no-confirm git-delta
  fi

  if [[ ! -d $HOME/.fzf ]]; then
    echo "Installing fzf"
    git clone https://github.com/junegunn/fzf.git $HOME/.fzf
    $HOME/.fzf/install --bin
  fi

  if [[ ! -L $HOME/.config/nvim ]] || [[ $(readlink $HOME/.config/nvim) != $HOME/src/rwjblue/dotvim ]]; then
    echo "setting up dotvim"
    git clone https://github.com/rwjblue/dotvim.git $HOME/src/rwjblue/dotvim
    ln -s $HOME/src/rwjblue/dotvim $HOME/.config/nvim

    echo "installing deps"
    nvim --headless '+Lazy! restore' '+TSUpdate' '+qa'
  fi
fi

# now setup the shell
sheldon lock
